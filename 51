import React, { Suspense } from 'react';
import { Canvas } from '@react-three/fiber';
import { OrbitControls, Stage } from '@react-three/drei';
import Tooth from './Tooth';

interface Odontograma3DProps {
  selectedTooth: number | null;
  onToothSelect: (toothNumber: number | null) => void;
}

const teethLayout = {
  upper: [18, 17, 16, 15, 14, 13, 12, 11, 21, 22, 23, 24, 25, 26, 27, 28],
  lower: [48, 47, 46, 45, 44, 43, 42, 41, 31, 32, 33, 34, 35, 36, 37, 38].reverse(),
};

const Odontograma3D: React.FC<Odontograma3DProps> = ({ selectedTooth, onToothSelect }) => {
  const getPosition = (index: number, arc: 'upper' | 'lower') => {
    const totalTeeth = 16;
    const angle = (Math.PI / (totalTeeth - 1)) * index;
    const radius = arc === 'upper' ? 5 : 4.8;
    const x = radius * Math.cos(angle);
    const z = -radius * Math.sin(angle);
    const y = arc === 'upper' ? 1 : -1;
    return [x, y, z] as [number, number, number];
  };

  return (
    <Canvas camera={{ position: [0, 5, 12], fov: 50 }}>
      <Suspense fallback={null}>
        <Stage environment="city" intensity={0.6}>
          <group>
            {teethLayout.upper.map((toothNumber, index) => (
              <Tooth
                key={toothNumber}
                number={toothNumber}
                position={getPosition(index, 'upper')}
                isSelected={selectedTooth === toothNumber}
                onSelect={onToothSelect}
              />
            ))}
            {teethLayout.lower.map((toothNumber, index) => (
              <Tooth
                key={toothNumber}
                number={toothNumber}
                position={getPosition(index, 'lower')}
                rotation={[Math.PI, 0, 0]}
                isSelected={selectedTooth === toothNumber}
                onSelect={onToothSelect}
              />
            ))}
          </group>
        </Stage>
      </Suspense>
      <OrbitControls makeDefault autoRotate autoRotateSpeed={0.5} />
    </Canvas>
  );
};

export default Odontograma3D;
