import React, { useRef, useState } from 'react';
import { useFrame } from '@react-three/fiber';
import { Mesh } from 'three';
import { Text } from '@react-three/drei';

interface ToothProps {
  number: number;
  position: [number, number, number];
  rotation?: [number, number, number];
  isSelected: boolean;
  onSelect: (toothNumber: number | null) => void;
}

const Tooth: React.FC<ToothProps> = ({ number, position, rotation = [0, 0, 0], isSelected, onSelect }) => {
  const meshRef = useRef<Mesh>(null!);
  const [hovered, setHover] = useState(false);

  useFrame(() => {
    if (meshRef.current) {
      meshRef.current.rotation.y += 0.00; // slight rotation if needed
    }
  });

  const handleClick = (e: any) => {
    e.stopPropagation();
    onSelect(isSelected ? null : number);
  };

  const color = isSelected ? '#3b82f6' : hovered ? '#93c5fd' : 'white';

  return (
    <group position={position} rotation={rotation}>
      <mesh
        ref={meshRef}
        onClick={handleClick}
        onPointerOver={(e) => { e.stopPropagation(); setHover(true); }}
        onPointerOut={() => setHover(false)}
        castShadow
        receiveShadow
      >
        <cylinderGeometry args={[0.3, 0.4, 1, 8]} />
        <meshStandardMaterial color={color} roughness={0.5} />
      </mesh>
       <Text
          position={[0, 0.8, 0]}
          fontSize={0.3}
          color="black"
          anchorX="center"
          anchorY="middle"
          rotation={[-rotation[0], -rotation[1], -rotation[2]]} // Counter-rotate text
        >
          {number}
        </Text>
    </group>
  );
};

export default Tooth;
